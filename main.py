#!/usr/bin/env python3
"""
AI Interview Agent - Hugging Face Knowledge Assessment
CLI Chatbox ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ file .md v√† m√¥ ph·ªèng ph·ªèng v·∫•n
"""

from dataclasses import dataclass
from datetime import datetime
import os
from pathlib import Path
import re
import sys
from typing import List, Optional

from bs4 import BeautifulSoup
import click
import colorama
import markdown
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Confirm, Prompt
from rich.table import Table

# Kh·ªüi t·∫°o colorama cho Windows
colorama.init(autoreset=True)

# Kh·ªüi t·∫°o Rich console
console = Console()


@dataclass
class Question:
    """C·∫•u tr√∫c d·ªØ li·ªáu cho c√¢u h·ªèi"""

    id: str
    title: str
    description: str
    question: str
    options: List[str]
    correct_answer: str
    explanation: str
    difficulty: str = 'medium'
    topic: str = 'general'


@dataclass
class Knowledge:
    """C·∫•u tr√∫c d·ªØ li·ªáu cho ki·∫øn th·ª©c"""

    title: str
    content: str
    source_file: str
    sections: List[str]
    keywords: List[str]


class MarkdownParser:
    """Parser ƒë·ªÉ ph√¢n t√≠ch file markdown"""

    def __init__(self):
        self.md = markdown.Markdown(extensions=['extra', 'toc'])

    def parse_questions(self, file_path: str) -> List[Question]:
        """Ph√¢n t√≠ch file markdown ch·ª©a c√¢u h·ªèi"""
        questions = []

        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # T√°ch c√°c c√¢u h·ªèi b·∫±ng d·∫•u ---
            question_blocks = content.split('---')

            for block in question_blocks:
                if 'exercise_' in block and '**Question:**' in block:
                    question = self._parse_question_block(block)
                    if question:
                        questions.append(question)

        except Exception as e:
            console.print(f'[red]L·ªói khi ƒë·ªçc file {file_path}: {e}[/red]')

        return questions

    def _parse_question_block(self, block: str) -> Optional[Question]:
        """Ph√¢n t√≠ch m·ªôt block c√¢u h·ªèi"""
        try:
            # T√¨m exercise ID
            exercise_match = re.search(r'exercise_(\w+)', block)
            if not exercise_match:
                return None

            exercise_id = exercise_match.group(1)

            # T√¨m title
            title_match = re.search(r'\*\*Title:\*\*\s*(.+)', block)
            title = (
                title_match.group(1).strip()
                if title_match
                else f'Question {exercise_id}'
            )

            # T√¨m description
            desc_match = re.search(r'\*\*Description:\*\*\s*(.+)', block)
            description = desc_match.group(1).strip() if desc_match else ''

            # T√¨m question
            question_match = re.search(r'\*\*Question:\*\*\s*(.+)', block)
            question = question_match.group(1).strip() if question_match else ''

            # T√¨m options
            options_section = re.search(r'\*\*Options:\*\*\s*\n((?:- .+\n?)+)', block)
            options = []
            if options_section:
                option_lines = options_section.group(1).strip().split('\n')
                options = [
                    line.strip('- ').strip()
                    for line in option_lines
                    if line.strip().startswith('- ')
                ]

            # T√¨m correct answer
            answer_match = re.search(r'\*\*Correct Answer:\*\*\s*(.+)', block)
            correct_answer = answer_match.group(1).strip() if answer_match else ''

            # T√¨m explanation
            explanation_match = re.search(r'\*\*Explanation:\*\*\s*(.+)', block)
            explanation = (
                explanation_match.group(1).strip() if explanation_match else ''
            )

            return Question(
                id=exercise_id,
                title=title,
                description=description,
                question=question,
                options=options,
                correct_answer=correct_answer,
                explanation=explanation,
            )

        except Exception as e:
            console.print(f'[red]L·ªói khi ph√¢n t√≠ch c√¢u h·ªèi: {e}[/red]')
            return None

    def parse_knowledge(self, file_path: str) -> Knowledge:
        """Ph√¢n t√≠ch file markdown ch·ª©a ki·∫øn th·ª©c"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # Parse markdown
            html = self.md.convert(content)
            soup = BeautifulSoup(html, 'html.parser')

            # L·∫•y title (h1 ƒë·∫ßu ti√™n)
            title_tag = soup.find('h1')
            title = title_tag.get_text().strip() if title_tag else Path(file_path).stem

            # L·∫•y c√°c section (h2, h3)
            sections = []
            for heading in soup.find_all(['h2', 'h3']):
                sections.append(heading.get_text().strip())

            # T·∫°o keywords t·ª´ headings v√† content
            keywords = []
            text_content = soup.get_text()

            # Th√™m t·ª´ kh√≥a t·ª´ headings
            keywords.extend([s.lower() for s in sections])

            # T√¨m t·ª´ kh√≥a quan tr·ªçng (c√≥ th·ªÉ c·∫£i thi·ªán b·∫±ng NLP)
            important_words = re.findall(
                r'\b(?:Hugging Face|LLM|Model|API|Hub|Dataset|Fine-tuning|Transformer|GPT|BERT|Llama)\b',
                text_content,
                re.IGNORECASE,
            )
            keywords.extend([w.lower() for w in important_words])

            return Knowledge(
                title=title,
                content=content,
                source_file=file_path,
                sections=sections,
                keywords=list(set(keywords)),  # Remove duplicates
            )

        except Exception as e:
            console.print(f'[red]L·ªói khi ƒë·ªçc file {file_path}: {e}[/red]')
            return None  # type: ignore


class InterviewAgent:
    """AI Agent ƒë·ªÉ m√¥ ph·ªèng ph·ªèng v·∫•n"""

    def __init__(self):
        self.questions = []
        self.knowledge_base = []
        self.current_question = None
        self.score = 0
        self.answered_questions = []
        self.session_stats = {
            'total_questions': 0,
            'correct_answers': 0,
            'start_time': None,
            'end_time': None,
        }

    def load_data(self, file_paths: List[str]):
        """T·∫£i d·ªØ li·ªáu t·ª´ c√°c file markdown"""
        parser = MarkdownParser()

        with Progress(
            SpinnerColumn(),
            TextColumn('[progress.description]{task.description}'),
            console=console,
        ) as progress:
            task = progress.add_task('ƒêang t·∫£i d·ªØ li·ªáu...', total=len(file_paths))

            for file_path in file_paths:
                if not os.path.exists(file_path):
                    console.print(f'[red]File kh√¥ng t·ªìn t·∫°i: {file_path}[/red]')
                    continue

                progress.update(task, description=f'ƒêang x·ª≠ l√Ω {Path(file_path).name}')

                if 'question' in file_path.lower():
                    # File ch·ª©a c√¢u h·ªèi
                    questions = parser.parse_questions(file_path)
                    self.questions.extend(questions)
                    console.print(
                        f'[green]‚úì ƒê√£ t·∫£i {len(questions)} c√¢u h·ªèi t·ª´ {Path(file_path).name}[/green]'
                    )
                else:
                    # File ch·ª©a ki·∫øn th·ª©c
                    knowledge = parser.parse_knowledge(file_path)
                    if knowledge:
                        self.knowledge_base.append(knowledge)
                        console.print(
                            f'[green]‚úì ƒê√£ t·∫£i ki·∫øn th·ª©c t·ª´ {Path(file_path).name}[/green]'
                        )

                progress.advance(task)

        console.print(
            f'\n[bold green]T·ªïng c·ªông: {len(self.questions)} c√¢u h·ªèi v√† {len(self.knowledge_base)} t√†i li·ªáu ki·∫øn th·ª©c[/bold green]'
        )

    def start_interview(self):
        """B·∫Øt ƒë·∫ßu ph·ªèng v·∫•n"""
        if not self.questions:
            console.print('[red]Kh√¥ng c√≥ c√¢u h·ªèi n√†o ƒë·ªÉ ph·ªèng v·∫•n![/red]')
            return

        self.session_stats['start_time'] = datetime.now()
        self.session_stats['total_questions'] = len(self.questions)

        console.print(
            Panel.fit(
                '[bold blue]üéØ B·∫Øt ƒë·∫ßu ph·ªèng v·∫•n Hugging Face![/bold blue]\n'
                f'T·ªïng s·ªë c√¢u h·ªèi: {len(self.questions)}\n'
                "G√µ 'help' ƒë·ªÉ xem tr·ª£ gi√∫p, 'quit' ƒë·ªÉ tho√°t",
                title='AI Interview Agent',
                border_style='blue',
            )
        )

        # Shuffle questions for randomness
        import random

        random.shuffle(self.questions)

        for i, question in enumerate(self.questions, 1):
            console.print(f'\n[bold cyan]C√¢u h·ªèi {i}/{len(self.questions)}[/bold cyan]')

            if self.ask_question(question):
                self.score += 1
                self.session_stats['correct_answers'] += 1

        self.session_stats['end_time'] = datetime.now()
        self.show_final_results()

    def ask_question(self, question: Question) -> bool:
        """ƒê·∫∑t c√¢u h·ªèi v√† nh·∫≠n ph·∫£n h·ªìi"""
        self.current_question = question

        # Hi·ªÉn th·ªã c√¢u h·ªèi
        console.print(
            Panel(
                f'[bold]{question.title}[/bold]\n\n'
                f'[dim]{question.description}[/dim]\n\n'
                f'[yellow]{question.question}[/yellow]',
                title=f'Question ID: {question.id}',
                border_style='yellow',
            )
        )

        # Hi·ªÉn th·ªã c√°c l·ª±a ch·ªçn
        table = Table(show_header=True, header_style='bold magenta')
        table.add_column('L·ª±a ch·ªçn', style='cyan', width=10)
        table.add_column('N·ªôi dung', style='white')

        for i, option in enumerate(question.options, 1):
            table.add_row(f'({i})', option)

        console.print(table)

        # Nh·∫≠n ph·∫£n h·ªìi t·ª´ user
        while True:
            try:
                response = Prompt.ask(
                    "\n[bold]Ch·ªçn ƒë√°p √°n c·ªßa b·∫°n (1-4) ho·∫∑c g√µ 'help'/'quit'[/bold]",
                    choices=['1', '2', '3', '4', 'help', 'quit', 'h', 'q'],
                    show_choices=False,
                )

                if response.lower() in ['quit', 'q']:
                    console.print('[red]Tho√°t ph·ªèng v·∫•n...[/red]')
                    sys.exit(0)

                if response.lower() in ['help', 'h']:
                    self.show_help()
                    continue

                # Chuy·ªÉn ƒë·ªïi l·ª±a ch·ªçn th√†nh text
                choice_index = int(response) - 1
                if 0 <= choice_index < len(question.options):
                    user_answer = question.options[choice_index]
                    return self.check_answer(user_answer, question)
                else:
                    console.print('[red]L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá![/red]')
                    continue

            except (ValueError, KeyboardInterrupt):
                console.print('[red]L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá![/red]')
                continue

    def check_answer(self, user_answer: str, question: Question) -> bool:
        """Ki·ªÉm tra ƒë√°p √°n v√† ƒë∆∞a ra ph·∫£n h·ªìi"""
        is_correct = user_answer.strip() == question.correct_answer.strip()

        if is_correct:
            console.print(
                Panel(
                    f'[bold green]üéâ Ch√≠nh x√°c![/bold green]\n\n'
                    f'[green]Gi·∫£i th√≠ch:[/green] {question.explanation}',
                    title='K·∫øt qu·∫£',
                    border_style='green',
                )
            )
        else:
            console.print(
                Panel(
                    f'[bold red]‚ùå Sai r·ªìi![/bold red]\n\n'
                    f'[red]ƒê√°p √°n ƒë√∫ng:[/red] {question.correct_answer}\n'
                    f'[red]ƒê√°p √°n c·ªßa b·∫°n:[/red] {user_answer}\n\n'
                    f'[yellow]Gi·∫£i th√≠ch:[/yellow] {question.explanation}',
                    title='K·∫øt qu·∫£',
                    border_style='red',
                )
            )

        # Hi·ªÉn th·ªã ki·∫øn th·ª©c li√™n quan
        self.show_related_knowledge(question)

        # H·ªèi c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng
        if not Confirm.ask('\n[bold]Ti·∫øp t·ª•c c√¢u h·ªèi ti·∫øp theo?[/bold]', default=True):
            console.print('[yellow]K·∫øt th√∫c ph·ªèng v·∫•n...[/yellow]')
            self.show_final_results()
            sys.exit(0)

        return is_correct

    def show_related_knowledge(self, question: Question):
        """Hi·ªÉn th·ªã ki·∫øn th·ª©c li√™n quan ƒë·∫øn c√¢u h·ªèi"""
        # T√¨m ki·∫øn th·ª©c li√™n quan d·ª±a tr√™n t·ª´ kh√≥a
        related_knowledge = []
        question_keywords = (
            question.title.lower().split() + question.question.lower().split()
        )

        for knowledge in self.knowledge_base:
            for keyword in question_keywords:
                if (
                    keyword in knowledge.keywords
                    or keyword in knowledge.content.lower()
                ):
                    related_knowledge.append(knowledge)
                    break

        if related_knowledge:
            console.print('\n[bold blue]üìö Ki·∫øn th·ª©c li√™n quan:[/bold blue]')
            for i, knowledge in enumerate(
                related_knowledge[:2], 1
            ):  # Ch·ªâ hi·ªÉn th·ªã 2 t√†i li·ªáu ƒë·∫ßu
                console.print(
                    f'[dim]{i}. {knowledge.title} (t·ª´ {Path(knowledge.source_file).name})[/dim]'
                )

    def show_help(self):
        """Hi·ªÉn th·ªã tr·ª£ gi√∫p"""
        help_text = """
        [bold blue]üîß H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:[/bold blue]

        [yellow]C√°c l·ªánh c√≥ s·∫µn:[/yellow]
        ‚Ä¢ 1-4: Ch·ªçn ƒë√°p √°n
        ‚Ä¢ help (h): Hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y
        ‚Ä¢ quit (q): Tho√°t ch∆∞∆°ng tr√¨nh

        [yellow]C√°ch th·ª©c ho·∫°t ƒë·ªông:[/yellow]
        ‚Ä¢ Ch·ªçn s·ªë t∆∞∆°ng ·ª©ng v·ªõi ƒë√°p √°n b·∫°n cho l√† ƒë√∫ng
        ‚Ä¢ H·ªá th·ªëng s·∫Ω ki·ªÉm tra v√† ƒë∆∞a ra gi·∫£i th√≠ch
        ‚Ä¢ ƒêi·ªÉm s·ªë v√† th·ªëng k√™ s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã cu·ªëi phi√™n

        [yellow]M·∫πo:[/yellow]
        ‚Ä¢ ƒê·ªçc k·ªπ m√¥ t·∫£ c√¢u h·ªèi tr∆∞·ªõc khi ch·ªçn
        ‚Ä¢ Ch√∫ √Ω ƒë·∫øn t·ª´ kh√≥a quan tr·ªçng
        ‚Ä¢ S·ª≠ d·ª•ng ki·∫øn th·ª©c t·ª´ t√†i li·ªáu ƒë√£ t·∫£i
        """
        console.print(Panel(help_text, title='Tr·ª£ gi√∫p', border_style='blue'))

    def show_final_results(self):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng"""
        if self.session_stats['start_time'] and self.session_stats['end_time']:
            duration = self.session_stats['end_time'] - self.session_stats['start_time']
            duration_str = f'{duration.total_seconds():.1f} gi√¢y'
        else:
            duration_str = 'N/A'

        total = self.session_stats['total_questions']
        correct = self.session_stats['correct_answers']
        percentage = (correct / total * 100) if total > 0 else 0

        # ƒê√°nh gi√° k·∫øt qu·∫£
        if percentage >= 80:
            grade = 'Xu·∫•t s·∫Øc! üåü'
            color = 'green'
        elif percentage >= 60:
            grade = 'Kh√° t·ªët! üëç'
            color = 'yellow'
        elif percentage >= 40:
            grade = 'C·∫ßn c·∫£i thi·ªán üìö'
            color = 'orange'
        else:
            grade = 'C·∫ßn h·ªçc th√™m üí™'
            color = 'red'

        result_table = Table(title='üéØ K·∫øt qu·∫£ ph·ªèng v·∫•n', title_style='bold blue')
        result_table.add_column('Ch·ªâ s·ªë', style='cyan', width=20)
        result_table.add_column('Gi√° tr·ªã', style='white')

        result_table.add_row('T·ªïng c√¢u h·ªèi', str(total))
        result_table.add_row('C√¢u tr·∫£ l·ªùi ƒë√∫ng', str(correct))
        result_table.add_row('T·ª∑ l·ªá ch√≠nh x√°c', f'{percentage:.1f}%')
        result_table.add_row('Th·ªùi gian', duration_str)
        result_table.add_row('ƒê√°nh gi√°', f'[{color}]{grade}[/{color}]')

        console.print('\n')
        console.print(result_table)

        # L·ªùi khuy√™n
        console.print(
            Panel(
                self.get_advice(percentage), title='üí° L·ªùi khuy√™n', border_style='blue'
            )
        )

    def get_advice(self, percentage: float) -> str:
        """ƒê∆∞a ra l·ªùi khuy√™n d·ª±a tr√™n k·∫øt qu·∫£"""
        if percentage >= 80:
            return '[green]B·∫°n ƒë√£ c√≥ ki·∫øn th·ª©c r·∫•t t·ªët v·ªÅ Hugging Face! Ti·∫øp t·ª•c duy tr√¨ v√† kh√°m ph√° c√°c t√≠nh nƒÉng n√¢ng cao.[/green]'
        elif percentage >= 60:
            return '[yellow]B·∫°n ƒë√£ n·∫Øm ƒë∆∞·ª£c nh·ªØng ki·∫øn th·ª©c c∆° b·∫£n. H√£y t·∫≠p trung v√†o nh·ªØng ph·∫ßn c√≤n thi·∫øu v√† th·ª±c h√†nh th√™m.[/yellow]'
        elif percentage >= 40:
            return '[orange]B·∫°n c·∫ßn ƒë·ªçc l·∫°i t√†i li·ªáu v√† th·ª±c h√†nh th√™m. T·∫≠p trung v√†o c√°c kh√°i ni·ªám c∆° b·∫£n tr∆∞·ªõc.[/orange]'
        else:
            return '[red]H√£y b·∫Øt ƒë·∫ßu t·ª´ nh·ªØng ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ Hugging Face. ƒê·ªçc documentation v√† l√†m theo tutorial.[/red]'


class ChatMode:
    """Ch·∫ø ƒë·ªô chat t∆∞∆°ng t√°c"""

    def __init__(self, agent: InterviewAgent):
        self.agent = agent
        self.conversation_history = []

    def start_chat(self):
        """B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô chat"""
        console.print(
            Panel.fit(
                '[bold green]üí¨ Ch·∫ø ƒë·ªô Chat t∆∞∆°ng t√°c[/bold green]\n'
                'H·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ Hugging Face!\n'
                "G√µ 'quit' ƒë·ªÉ tho√°t, 'interview' ƒë·ªÉ chuy·ªÉn sang ch·∫ø ƒë·ªô ph·ªèng v·∫•n",
                title='AI Chat Assistant',
                border_style='green',
            )
        )

        while True:
            try:
                user_input = Prompt.ask('\n[bold blue]B·∫°n[/bold blue]')

                if user_input.lower() in ['quit', 'q', 'exit']:
                    console.print('[green]T·∫°m bi·ªát! üëã[/green]')
                    break

                if user_input.lower() in ['interview', 'test']:
                    console.print('[yellow]Chuy·ªÉn sang ch·∫ø ƒë·ªô ph·ªèng v·∫•n...[/yellow]')
                    self.agent.start_interview()
                    continue

                # X·ª≠ l√Ω c√¢u h·ªèi
                response = self.process_question(user_input)
                console.print('\n[bold green]ü§ñ AI Assistant[/bold green]')
                console.print(Panel(response, border_style='green'))

            except KeyboardInterrupt:
                console.print('\n[green]T·∫°m bi·ªát! üëã[/green]')
                break

    def process_question(self, question: str) -> str:
        """X·ª≠ l√Ω c√¢u h·ªèi v√† tr·∫£ l·ªùi d·ª±a tr√™n knowledge base"""
        question_lower = question.lower()

        # T√¨m ki·∫øn th·ª©c li√™n quan
        relevant_knowledge = []
        for knowledge in self.agent.knowledge_base:
            for keyword in knowledge.keywords:
                if keyword in question_lower:
                    relevant_knowledge.append(knowledge)
                    break

        # N·∫øu kh√¥ng t√¨m th·∫•y ki·∫øn th·ª©c li√™n quan, t√¨m theo content
        if not relevant_knowledge:
            for knowledge in self.agent.knowledge_base:
                if any(
                    word in knowledge.content.lower() for word in question_lower.split()
                ):
                    relevant_knowledge.append(knowledge)

        if relevant_knowledge:
            # T·∫°o ph·∫£n h·ªìi d·ª±a tr√™n ki·∫øn th·ª©c
            response = 'D·ª±a tr√™n t√†i li·ªáu ƒë√£ t·∫£i, t√¥i c√≥ th·ªÉ tr·∫£ l·ªùi:\n\n'

            for knowledge in relevant_knowledge[:2]:  # Ch·ªâ l·∫•y 2 t√†i li·ªáu ƒë·∫ßu
                response += f'**{knowledge.title}**\n'
                # Tr√≠ch xu·∫•t ƒëo·∫°n vƒÉn li√™n quan
                lines = knowledge.content.split('\n')
                relevant_lines = []
                for line in lines:
                    if any(word in line.lower() for word in question_lower.split()):
                        relevant_lines.append(line.strip())

                if relevant_lines:
                    response += '\n'.join(relevant_lines[:3])  # Ch·ªâ l·∫•y 3 d√≤ng ƒë·∫ßu
                else:
                    response += knowledge.content[:300] + '...'  # L·∫•y 300 k√Ω t·ª± ƒë·∫ßu

                response += f'\n\n*(Ngu·ªìn: {Path(knowledge.source_file).name})*\n\n'
        else:
            response = 'Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong t√†i li·ªáu ƒë√£ t·∫£i. H√£y th·ª≠:\n\n'
            response += "‚Ä¢ Chuy·ªÉn sang ch·∫ø ƒë·ªô ph·ªèng v·∫•n: g√µ 'interview'\n"
            response += '‚Ä¢ H·ªèi v·ªÅ c√°c ch·ªß ƒë·ªÅ nh∆∞: Hugging Face, LLM, Model, Hub, API\n'
            response += f'‚Ä¢ T√¥i c√≥ {len(self.agent.knowledge_base)} t√†i li·ªáu v√† {len(self.agent.questions)} c√¢u h·ªèi'

        return response


@click.command()
@click.argument('files', nargs=-1, type=click.Path(exists=True))
@click.option(
    '--mode',
    '-m',
    type=click.Choice(['interview', 'chat', 'both']),
    default='both',
    help='Ch·ªçn ch·∫ø ƒë·ªô: interview (ph·ªèng v·∫•n), chat (tr√≤ chuy·ªán), both (c·∫£ hai)',
)
@click.option('--shuffle', '-s', is_flag=True, help='X√°o tr·ªôn th·ª© t·ª± c√¢u h·ªèi')
@click.option('--limit', '-l', type=int, help='Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng c√¢u h·ªèi')
@click.option('--verbose', '-v', is_flag=True, help='Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt')
def main(files, mode, shuffle, limit, verbose):
    """
    AI Interview Agent - Hugging Face Knowledge Assessment

    Ph√¢n t√≠ch c√°c file .md v√† t·∫°o phi√™n ph·ªèng v·∫•n t∆∞∆°ng t√°c.

    Examples:
        python main.py getting-started/questions.md getting-started/introduction.md
        python main.py *.md --mode chat
        python main.py questions.md --mode interview --limit 5
    """

    # Banner
    console.print(
        Panel.fit(
            '[bold blue]ü§ñ AI Interview Agent[/bold blue]\n'
            '[dim]Hugging Face Knowledge Assessment[/dim]\n'
            f'[green]Mode: {mode.upper()}[/green]',
            title='Welcome',
            border_style='blue',
        )
    )

    if not files:
        console.print('[red]‚ùå C·∫ßn ch·ªâ ƒë·ªãnh √≠t nh·∫•t m·ªôt file .md![/red]')
        console.print('\n[yellow]V√≠ d·ª•:[/yellow]')
        console.print(
            '  python main.py getting-started/questions.md getting-started/introduction.md'
        )
        console.print('  python main.py *.md --mode chat')
        return

    # Kh·ªüi t·∫°o agent
    agent = InterviewAgent()

    # T·∫£i d·ªØ li·ªáu
    console.print(f'\n[bold]üìÅ T·∫£i d·ªØ li·ªáu t·ª´ {len(files)} file(s)...[/bold]')
    agent.load_data(list(files))

    if verbose:
        console.print(
            f'\n[dim]Loaded {len(agent.questions)} questions and {len(agent.knowledge_base)} documents[/dim]'
        )

    # √Åp d·ª•ng gi·ªõi h·∫°n
    if limit and limit < len(agent.questions):
        agent.questions = agent.questions[:limit]
        console.print(f'[yellow]Gi·ªõi h·∫°n s·ªë c√¢u h·ªèi: {limit}[/yellow]')

    # Ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông
    if mode == 'interview':
        agent.start_interview()
    elif mode == 'chat':
        chat = ChatMode(agent)
        chat.start_chat()
    else:  # both
        console.print('\n[bold yellow]Ch·ªçn ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông:[/bold yellow]')
        console.print('1. üéØ Ph·ªèng v·∫•n (Interview)')
        console.print('2. üí¨ Tr√≤ chuy·ªán (Chat)')
        console.print('3. üîÑ C·∫£ hai (Both)')

        choice = Prompt.ask('Ch·ªçn ch·∫ø ƒë·ªô', choices=['1', '2', '3'], default='1')

        if choice == '1':
            agent.start_interview()
        elif choice == '2':
            chat = ChatMode(agent)
            chat.start_chat()
        else:
            chat = ChatMode(agent)
            console.print(
                "\n[bold]B·∫Øt ƒë·∫ßu v·ªõi ch·∫ø ƒë·ªô chat, g√µ 'interview' ƒë·ªÉ chuy·ªÉn sang ph·ªèng v·∫•n[/bold]"
            )
            chat.start_chat()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        console.print('\n[green]T·∫°m bi·ªát! üëã[/green]')
    except Exception as e:
        console.print(f'\n[red]L·ªói: {e}[/red]')
        if '--verbose' in sys.argv:
            import traceback

            console.print(traceback.format_exc())
